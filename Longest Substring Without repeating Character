class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n=s.length();
        //initialize two pointers left and right
        int left=0;
        int maxlen=0;
        int right=0;
        Set<Character> set = new HashSet<>();
        //now traverse to the right
        while(right<n){
            //if an element reappears ie its duplicate
            if(set.contains(s.charAt(right))){
                //shrink from left side remove the leftmost element
                set.remove(s.charAt(left));
                left++;//move forward
            }else{
                //if char is unique then move forward
                set.add(s.charAt(right));
                maxlen=Math.max(maxlen , right-left+1);
                right++;
            }


        }
    return maxlen;
    }
}
    //brute force
    //     int maxlen=0;
    //     for(int i=0;i<n ;i++){
    //         Set<Character> set = new HashSet<>();
    //         for(int j=i ;j<n ;j++){
    //             char c= s.charAt(j);
    //             if(set.contains(c)){
    //                 break;
    //             }else{
    //                 set.add(c);
    //                 maxlen=Math.max(maxlen , j-i+1);
    //             }
    //         }
   
    // }
    // return maxlen;

